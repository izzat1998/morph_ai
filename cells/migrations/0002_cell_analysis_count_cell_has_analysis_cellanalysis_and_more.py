# Generated by Django 5.2.3 on 2025-06-19 06:25

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cells', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='cell',
            name='analysis_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='cell',
            name='has_analysis',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='CellAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('segmentation_image', models.ImageField(blank=True, null=True, upload_to='analyses/segmentation/')),
                ('cellpose_model', models.CharField(choices=[('cyto', 'Cytoplasm'), ('nuclei', 'Nuclei'), ('cyto2', 'Cytoplasm 2.0'), ('custom', 'Custom')], default='cyto', max_length=20)),
                ('cellpose_diameter', models.FloatField(default=30.0, help_text='Expected cell diameter in pixels')),
                ('flow_threshold', models.FloatField(default=0.4, help_text='Flow error threshold')),
                ('cellprob_threshold', models.FloatField(default=0.0, help_text='Cell probability threshold')),
                ('num_cells_detected', models.PositiveIntegerField(default=0)),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='cells.cell')),
            ],
            options={
                'verbose_name_plural': 'Cell Analyses',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='DetectedCell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.PositiveIntegerField(help_text='Cellpose assigned cell ID')),
                ('area', models.FloatField(help_text='Area in pixels²')),
                ('perimeter', models.FloatField(help_text='Perimeter in pixels')),
                ('circularity', models.FloatField(help_text='4π×area/perimeter²')),
                ('eccentricity', models.FloatField(help_text='Eccentricity of the fitted ellipse')),
                ('solidity', models.FloatField(help_text='Area/convex_area ratio')),
                ('extent', models.FloatField(help_text='Area/bounding_box_area ratio')),
                ('major_axis_length', models.FloatField(help_text='Major axis length in pixels')),
                ('minor_axis_length', models.FloatField(help_text='Minor axis length in pixels')),
                ('aspect_ratio', models.FloatField(help_text='Major/minor axis ratio')),
                ('centroid_x', models.FloatField(help_text='X coordinate of centroid')),
                ('centroid_y', models.FloatField(help_text='Y coordinate of centroid')),
                ('bounding_box_x', models.PositiveIntegerField(help_text='X coordinate of bounding box')),
                ('bounding_box_y', models.PositiveIntegerField(help_text='Y coordinate of bounding box')),
                ('bounding_box_width', models.PositiveIntegerField(help_text='Width of bounding box')),
                ('bounding_box_height', models.PositiveIntegerField(help_text='Height of bounding box')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detected_cells', to='cells.cellanalysis')),
            ],
            options={
                'ordering': ['cell_id'],
                'unique_together': {('analysis', 'cell_id')},
            },
        ),
    ]
